apiVersion: v1
items:
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      prometheus-operator-input-hash: "1266556778209070345"
    creationTimestamp: "2025-02-10T07:02:22Z"
    generation: 1
    labels:
      app.kubernetes.io/component: alert-router
      app.kubernetes.io/instance: main
      app.kubernetes.io/name: alertmanager
      app.kubernetes.io/part-of: kube-prometheus
      app.kubernetes.io/version: 0.23.0
    name: alertmanager-main
    namespace: kubesphere-monitoring-system
    ownerReferences:
    - apiVersion: monitoring.coreos.com/v1
      blockOwnerDeletion: true
      controller: true
      kind: Alertmanager
      name: main
      uid: b311a43b-db4f-4b42-ac99-8cdd545f6c12
    resourceVersion: "72238392"
    uid: dd53f019-52a1-4dfb-b919-5923acf95cb8
  spec:
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain
    podManagementPolicy: Parallel
    replicas: 3
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        alertmanager: main
        app.kubernetes.io/instance: main
        app.kubernetes.io/managed-by: prometheus-operator
        app.kubernetes.io/name: alertmanager
    serviceName: alertmanager-operated
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: alertmanager
        creationTimestamp: null
        labels:
          alertmanager: main
          app.kubernetes.io/component: alert-router
          app.kubernetes.io/instance: main
          app.kubernetes.io/managed-by: prometheus-operator
          app.kubernetes.io/name: alertmanager
          app.kubernetes.io/part-of: kube-prometheus
          app.kubernetes.io/version: 0.23.0
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: alertmanager
                    operator: In
                    values:
                    - main
                namespaces:
                - kubesphere-monitoring-system
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - --config.file=/etc/alertmanager/config/alertmanager.yaml
          - --storage.path=/alertmanager
          - --data.retention=120h
          - --cluster.listen-address=[$(POD_IP)]:9094
          - --web.listen-address=:9093
          - --web.route-prefix=/
          - --cluster.peer=alertmanager-main-0.alertmanager-operated:9094
          - --cluster.peer=alertmanager-main-1.alertmanager-operated:9094
          - --cluster.peer=alertmanager-main-2.alertmanager-operated:9094
          - --cluster.reconnect-timeout=5m
          env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          image: prom/alertmanager:v0.23.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /-/healthy
              port: web
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          name: alertmanager
          ports:
          - containerPort: 9093
            name: web
            protocol: TCP
          - containerPort: 9094
            name: mesh-tcp
            protocol: TCP
          - containerPort: 9094
            name: mesh-udp
            protocol: UDP
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /-/ready
              port: web
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 20m
              memory: 30Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/alertmanager/config
            name: config-volume
          - mountPath: /etc/alertmanager/certs
            name: tls-assets
            readOnly: true
          - mountPath: /alertmanager
            name: alertmanager-main-db
        - args:
          - --listen-address=:8080
          - --reload-url=http://localhost:9093/-/reload
          - --watched-dir=/etc/alertmanager/config
          command:
          - /bin/prometheus-config-reloader
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: SHARD
            value: "-1"
          image: kubesphere/prometheus-config-reloader:v0.55.1
          imagePullPolicy: IfNotPresent
          name: config-reloader
          ports:
          - containerPort: 8080
            name: reloader-web
            protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: 50Mi
            requests:
              cpu: 100m
              memory: 50Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/alertmanager/config
            name: config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
        serviceAccount: alertmanager-main
        serviceAccountName: alertmanager-main
        terminationGracePeriodSeconds: 120
        volumes:
        - name: config-volume
          secret:
            defaultMode: 420
            secretName: alertmanager-main-generated
        - name: tls-assets
          projected:
            defaultMode: 420
            sources:
            - secret:
                name: alertmanager-main-tls-assets-0
        - emptyDir: {}
          name: alertmanager-main-db
    updateStrategy:
      type: RollingUpdate
  status:
    availableReplicas: 3
    collisionCount: 0
    currentReplicas: 3
    currentRevision: alertmanager-main-f67787f9b
    observedGeneration: 1
    readyReplicas: 3
    replicas: 3
    updateRevision: alertmanager-main-f67787f9b
    updatedReplicas: 3
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      prometheus-operator-input-hash: "3448026433478796101"
    creationTimestamp: "2025-02-10T07:02:14Z"
    generation: 1
    labels:
      app.kubernetes.io/component: prometheus
      app.kubernetes.io/instance: k8s
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/part-of: kube-prometheus
      app.kubernetes.io/version: 2.39.1
      operator.prometheus.io/name: k8s
      operator.prometheus.io/shard: "0"
    name: prometheus-k8s
    namespace: kubesphere-monitoring-system
    ownerReferences:
    - apiVersion: monitoring.coreos.com/v1
      blockOwnerDeletion: true
      controller: true
      kind: Prometheus
      name: k8s
      uid: 4b040f98-bedd-48d7-8312-46382d0fa134
    resourceVersion: "72241142"
    uid: 5d38d7dc-8f61-4eb2-81b7-07cb7d961443
  spec:
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain
    podManagementPolicy: Parallel
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: k8s
        app.kubernetes.io/managed-by: prometheus-operator
        app.kubernetes.io/name: prometheus
        operator.prometheus.io/name: k8s
        operator.prometheus.io/shard: "0"
        prometheus: k8s
    serviceName: prometheus-operated
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: prometheus
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: prometheus
          app.kubernetes.io/instance: k8s
          app.kubernetes.io/managed-by: prometheus-operator
          app.kubernetes.io/name: prometheus
          app.kubernetes.io/part-of: kube-prometheus
          app.kubernetes.io/version: 2.39.1
          operator.prometheus.io/name: k8s
          operator.prometheus.io/shard: "0"
          prometheus: k8s
      spec:
        affinity:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                - key: node-role.kubernetes.io/monitoring
                  operator: Exists
              weight: 100
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: prometheus
                    app.kubernetes.io/instance: k8s
                    app.kubernetes.io/name: prometheus
                    app.kubernetes.io/part-of: kube-prometheus
                namespaces:
                - kubesphere-monitoring-system
                topologyKey: kubernetes.io/hostname
              weight: 100
        automountServiceAccountToken: true
        containers:
        - args:
          - --web.console.templates=/etc/prometheus/consoles
          - --web.console.libraries=/etc/prometheus/console_libraries
          - --storage.tsdb.retention.time=7d
          - --config.file=/etc/prometheus/config_out/prometheus.env.yaml
          - --storage.tsdb.path=/prometheus
          - --web.enable-lifecycle
          - --query.max-concurrency=1000
          - --web.route-prefix=/
          - --web.config.file=/etc/prometheus/web_config/web-config.yaml
          image: prom/prometheus:v2.39.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /-/healthy
              port: web
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          name: prometheus
          ports:
          - containerPort: 9090
            name: web
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/ready
              port: web
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "4"
              memory: 16Gi
            requests:
              cpu: 200m
              memory: 400Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          startupProbe:
            failureThreshold: 60
            httpGet:
              path: /-/ready
              port: web
              scheme: HTTP
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 3
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/prometheus/config_out
            name: config-out
            readOnly: true
          - mountPath: /etc/prometheus/certs
            name: tls-assets
            readOnly: true
          - mountPath: /prometheus
            name: prometheus-k8s-db
            subPath: prometheus-db
          - mountPath: /etc/prometheus/rules/prometheus-k8s-rulefiles-0
            name: prometheus-k8s-rulefiles-0
          - mountPath: /etc/prometheus/web_config/web-config.yaml
            name: web-config
            readOnly: true
            subPath: web-config.yaml
        - args:
          - --listen-address=:8080
          - --reload-url=http://localhost:9090/-/reload
          - --config-file=/etc/prometheus/config/prometheus.yaml.gz
          - --config-envsubst-file=/etc/prometheus/config_out/prometheus.env.yaml
          - --watched-dir=/etc/prometheus/rules/prometheus-k8s-rulefiles-0
          command:
          - /bin/prometheus-config-reloader
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: SHARD
            value: "0"
          image: kubesphere/prometheus-config-reloader:v0.55.1
          imagePullPolicy: IfNotPresent
          name: config-reloader
          ports:
          - containerPort: 8080
            name: reloader-web
            protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: 50Mi
            requests:
              cpu: 100m
              memory: 50Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/prometheus/config
            name: config
          - mountPath: /etc/prometheus/config_out
            name: config-out
          - mountPath: /etc/prometheus/rules/prometheus-k8s-rulefiles-0
            name: prometheus-k8s-rulefiles-0
        dnsPolicy: ClusterFirst
        initContainers:
        - args:
          - --watch-interval=0
          - --listen-address=:8080
          - --config-file=/etc/prometheus/config/prometheus.yaml.gz
          - --config-envsubst-file=/etc/prometheus/config_out/prometheus.env.yaml
          - --watched-dir=/etc/prometheus/rules/prometheus-k8s-rulefiles-0
          command:
          - /bin/prometheus-config-reloader
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: SHARD
            value: "0"
          image: kubesphere/prometheus-config-reloader:v0.55.1
          imagePullPolicy: IfNotPresent
          name: init-config-reloader
          ports:
          - containerPort: 8080
            name: reloader-web
            protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: 50Mi
            requests:
              cpu: 100m
              memory: 50Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/prometheus/config
            name: config
          - mountPath: /etc/prometheus/config_out
            name: config-out
          - mountPath: /etc/prometheus/rules/prometheus-k8s-rulefiles-0
            name: prometheus-k8s-rulefiles-0
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 0
          runAsNonRoot: false
          runAsUser: 0
        serviceAccount: prometheus-k8s
        serviceAccountName: prometheus-k8s
        terminationGracePeriodSeconds: 600
        tolerations:
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: monitoring
        volumes:
        - name: config
          secret:
            defaultMode: 420
            secretName: prometheus-k8s
        - name: tls-assets
          projected:
            defaultMode: 420
            sources:
            - secret:
                name: prometheus-k8s-tls-assets-0
        - emptyDir: {}
          name: config-out
        - configMap:
            defaultMode: 420
            name: prometheus-k8s-rulefiles-0
          name: prometheus-k8s-rulefiles-0
        - name: web-config
          secret:
            defaultMode: 420
            secretName: prometheus-k8s-web-config
    updateStrategy:
      type: RollingUpdate
    volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        creationTimestamp: null
        name: prometheus-k8s-db
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 20Gi
        volumeMode: Filesystem
      status:
        phase: Pending
  status:
    availableReplicas: 2
    collisionCount: 0
    currentReplicas: 2
    currentRevision: prometheus-k8s-745fccb79c
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updateRevision: prometheus-k8s-745fccb79c
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      prometheus-operator-input-hash: "5145373149866056593"
    creationTimestamp: "2025-03-04T08:46:14Z"
    generation: 1
    labels:
      app.kubernetes.io/component: thanos-ruler
      app.kubernetes.io/instance: kubesphere
      app.kubernetes.io/name: thanos-ruler
      app.kubernetes.io/part-of: kube-prometheus
      app.kubernetes.io/version: 0.31.0
    name: thanos-ruler-kubesphere
    namespace: kubesphere-monitoring-system
    ownerReferences:
    - apiVersion: monitoring.coreos.com/v1
      blockOwnerDeletion: true
      controller: true
      kind: ThanosRuler
      name: kubesphere
      uid: 8f59f3d8-07d7-4bef-a0a9-b0522abba605
    resourceVersion: "72238143"
    uid: 7515b72f-709c-4a9c-822d-fcdbc676e0dc
  spec:
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain
    podManagementPolicy: Parallel
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: thanos-ruler
        app.kubernetes.io/instance: kubesphere
        app.kubernetes.io/managed-by: prometheus-operator
        app.kubernetes.io/name: thanos-ruler
        app.kubernetes.io/part-of: kube-prometheus
        app.kubernetes.io/version: 0.31.0
        thanos-ruler: kubesphere
    serviceName: ""
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: thanos-ruler
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: thanos-ruler
          app.kubernetes.io/instance: kubesphere
          app.kubernetes.io/managed-by: prometheus-operator
          app.kubernetes.io/name: thanos-ruler
          app.kubernetes.io/part-of: kube-prometheus
          app.kubernetes.io/version: 0.31.0
          thanos-ruler: kubesphere
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: thanos-ruler
                    app.kubernetes.io/instance: kubesphere
                    app.kubernetes.io/name: thanos-ruler
                    app.kubernetes.io/part-of: kube-prometheus
                namespaces:
                - kubesphere-monitoring-system
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - rule
          - --data-dir=/thanos/data
          - --eval-interval=1m
          - --tsdb.retention=24h
          - --label=thanos_ruler_replica="$(POD_NAME)"
          - --alert.label-drop=thanos_ruler_replica
          - --query=http://prometheus-operated.kubesphere-monitoring-system.svc:9090
          - --rule-file=/etc/thanos/rules/*/*.yaml
          - --alertmanagers.url=dnssrv+http://alertmanager-operated.kubesphere-monitoring-system.svc:9093
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          image: thanosio/thanos:v0.31.0
          imagePullPolicy: IfNotPresent
          name: thanos-ruler
          ports:
          - containerPort: 10901
            name: grpc
            protocol: TCP
          - containerPort: 10902
            name: web
            protocol: TCP
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /thanos/data
            name: thanos-ruler-kubesphere-data
          - mountPath: /etc/thanos/rules/thanos-ruler-kubesphere-rulefiles-0
            name: thanos-ruler-kubesphere-rulefiles-0
        - args:
          - --listen-address=:8080
          - --reload-url=http://localhost:10902/-/reload
          - --watched-dir=/etc/thanos/rules/thanos-ruler-kubesphere-rulefiles-0
          command:
          - /bin/prometheus-config-reloader
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: SHARD
            value: "-1"
          image: kubesphere/prometheus-config-reloader:v0.55.1
          imagePullPolicy: IfNotPresent
          name: config-reloader
          ports:
          - containerPort: 8080
            name: reloader-web
            protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: 50Mi
            requests:
              cpu: 100m
              memory: 50Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/thanos/rules/thanos-ruler-kubesphere-rulefiles-0
            name: thanos-ruler-kubesphere-rulefiles-0
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 120
        volumes:
        - configMap:
            defaultMode: 420
            name: thanos-ruler-kubesphere-rulefiles-0
          name: thanos-ruler-kubesphere-rulefiles-0
        - emptyDir: {}
          name: thanos-ruler-kubesphere-data
    updateStrategy:
      type: RollingUpdate
  status:
    availableReplicas: 2
    collisionCount: 0
    currentReplicas: 2
    currentRevision: thanos-ruler-kubesphere-7d97bc46ff
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updateRevision: thanos-ruler-kubesphere-7d97bc46ff
    updatedReplicas: 2
kind: List
metadata:
  resourceVersion: ""
