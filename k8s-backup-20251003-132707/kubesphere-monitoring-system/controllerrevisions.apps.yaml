apiVersion: v1
items:
- apiVersion: apps/v1
  data:
    spec:
      template:
        $patch: replace
        metadata:
          annotations:
            kubectl.kubernetes.io/default-container: alertmanager
          creationTimestamp: null
          labels:
            alertmanager: main
            app.kubernetes.io/component: alert-router
            app.kubernetes.io/instance: main
            app.kubernetes.io/managed-by: prometheus-operator
            app.kubernetes.io/name: alertmanager
            app.kubernetes.io/part-of: kube-prometheus
            app.kubernetes.io/version: 0.23.0
        spec:
          affinity:
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - podAffinityTerm:
                  labelSelector:
                    matchExpressions:
                    - key: alertmanager
                      operator: In
                      values:
                      - main
                  namespaces:
                  - kubesphere-monitoring-system
                  topologyKey: kubernetes.io/hostname
                weight: 100
          containers:
          - args:
            - --config.file=/etc/alertmanager/config/alertmanager.yaml
            - --storage.path=/alertmanager
            - --data.retention=120h
            - --cluster.listen-address=[$(POD_IP)]:9094
            - --web.listen-address=:9093
            - --web.route-prefix=/
            - --cluster.peer=alertmanager-main-0.alertmanager-operated:9094
            - --cluster.peer=alertmanager-main-1.alertmanager-operated:9094
            - --cluster.peer=alertmanager-main-2.alertmanager-operated:9094
            - --cluster.reconnect-timeout=5m
            env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            image: prom/alertmanager:v0.23.0
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 10
              httpGet:
                path: /-/healthy
                port: web
                scheme: HTTP
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 3
            name: alertmanager
            ports:
            - containerPort: 9093
              name: web
              protocol: TCP
            - containerPort: 9094
              name: mesh-tcp
              protocol: TCP
            - containerPort: 9094
              name: mesh-udp
              protocol: UDP
            readinessProbe:
              failureThreshold: 10
              httpGet:
                path: /-/ready
                port: web
                scheme: HTTP
              initialDelaySeconds: 3
              periodSeconds: 5
              successThreshold: 1
              timeoutSeconds: 3
            resources:
              limits:
                cpu: 200m
                memory: 200Mi
              requests:
                cpu: 20m
                memory: 30Mi
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: true
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: FallbackToLogsOnError
            volumeMounts:
            - mountPath: /etc/alertmanager/config
              name: config-volume
            - mountPath: /etc/alertmanager/certs
              name: tls-assets
              readOnly: true
            - mountPath: /alertmanager
              name: alertmanager-main-db
          - args:
            - --listen-address=:8080
            - --reload-url=http://localhost:9093/-/reload
            - --watched-dir=/etc/alertmanager/config
            command:
            - /bin/prometheus-config-reloader
            env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: SHARD
              value: "-1"
            image: kubesphere/prometheus-config-reloader:v0.55.1
            imagePullPolicy: IfNotPresent
            name: config-reloader
            ports:
            - containerPort: 8080
              name: reloader-web
              protocol: TCP
            resources:
              limits:
                cpu: 100m
                memory: 50Mi
              requests:
                cpu: 100m
                memory: 50Mi
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: true
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: FallbackToLogsOnError
            volumeMounts:
            - mountPath: /etc/alertmanager/config
              name: config-volume
              readOnly: true
          dnsPolicy: ClusterFirst
          nodeSelector:
            kubernetes.io/os: linux
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 2000
            runAsNonRoot: true
            runAsUser: 1000
          serviceAccount: alertmanager-main
          serviceAccountName: alertmanager-main
          terminationGracePeriodSeconds: 120
          volumes:
          - name: config-volume
            secret:
              defaultMode: 420
              secretName: alertmanager-main-generated
          - name: tls-assets
            projected:
              defaultMode: 420
              sources:
              - secret:
                  name: alertmanager-main-tls-assets-0
          - emptyDir: {}
            name: alertmanager-main-db
  kind: ControllerRevision
  metadata:
    annotations:
      prometheus-operator-input-hash: "4563383505472690736"
    creationTimestamp: "2025-02-10T07:02:23Z"
    labels:
      alertmanager: main
      app.kubernetes.io/component: alert-router
      app.kubernetes.io/instance: main
      app.kubernetes.io/managed-by: prometheus-operator
      app.kubernetes.io/name: alertmanager
      app.kubernetes.io/part-of: kube-prometheus
      app.kubernetes.io/version: 0.23.0
      controller.kubernetes.io/hash: f67787f9b
    name: alertmanager-main-f67787f9b
    namespace: kubesphere-monitoring-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: alertmanager-main
      uid: dd53f019-52a1-4dfb-b919-5923acf95cb8
    resourceVersion: "1023112"
    uid: 41387526-1b90-4a8c-adff-95737d032019
  revision: 1
- apiVersion: apps/v1
  data:
    spec:
      template:
        $patch: replace
        metadata:
          creationTimestamp: null
          labels:
            app.kubernetes.io/component: exporter
            app.kubernetes.io/name: node-exporter
            app.kubernetes.io/part-of: kube-prometheus
            app.kubernetes.io/version: 1.3.1
        spec:
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: node-role.kubernetes.io/edge
                    operator: DoesNotExist
          containers:
          - args:
            - --web.listen-address=127.0.0.1:9100
            - --path.procfs=/host/proc
            - --path.sysfs=/host/sys
            - --path.rootfs=/host/root
            - --no-collector.wifi
            - --no-collector.hwmon
            - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+)($|/)
            - --collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs)$
            image: prom/node-exporter:v1.3.1
            imagePullPolicy: IfNotPresent
            name: node-exporter
            resources:
              limits:
                cpu: "1"
                memory: 500Mi
              requests:
                cpu: 102m
                memory: 180Mi
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /host/proc
              name: proc
              readOnly: true
            - mountPath: /host/sys
              name: sys
              readOnly: true
            - mountPath: /host/root
              mountPropagation: HostToContainer
              name: root
              readOnly: true
          - args:
            - --logtostderr
            - --secure-listen-address=[$(IP)]:9100
            - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
            - --upstream=http://127.0.0.1:9100/
            env:
            - name: IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            image: kubesphere/kube-rbac-proxy:v0.11.0
            imagePullPolicy: IfNotPresent
            name: kube-rbac-proxy
            ports:
            - containerPort: 9100
              hostPort: 9100
              name: https
              protocol: TCP
            resources:
              limits:
                cpu: "1"
                memory: 100Mi
              requests:
                cpu: 10m
                memory: 20Mi
            securityContext:
              runAsGroup: 65532
              runAsNonRoot: true
              runAsUser: 65532
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          hostNetwork: true
          hostPID: true
          nodeSelector:
            kubernetes.io/os: linux
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
          serviceAccount: node-exporter
          serviceAccountName: node-exporter
          terminationGracePeriodSeconds: 30
          tolerations:
          - operator: Exists
          volumes:
          - hostPath:
              path: /proc
              type: ""
            name: proc
          - hostPath:
              path: /sys
              type: ""
            name: sys
          - hostPath:
              path: /
              type: ""
            name: root
  kind: ControllerRevision
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"DaemonSet","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"exporter","app.kubernetes.io/name":"node-exporter","app.kubernetes.io/part-of":"kube-prometheus","app.kubernetes.io/version":"1.3.1"},"name":"node-exporter","namespace":"kubesphere-monitoring-system"},"spec":{"selector":{"matchLabels":{"app.kubernetes.io/component":"exporter","app.kubernetes.io/name":"node-exporter","app.kubernetes.io/part-of":"kube-prometheus"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"exporter","app.kubernetes.io/name":"node-exporter","app.kubernetes.io/part-of":"kube-prometheus","app.kubernetes.io/version":"1.3.1"}},"spec":{"affinity":{"nodeAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchExpressions":[{"key":"node-role.kubernetes.io/edge","operator":"DoesNotExist"}]}]}}},"containers":[{"args":["--web.listen-address=127.0.0.1:9100","--path.procfs=/host/proc","--path.sysfs=/host/sys","--path.rootfs=/host/root","--no-collector.wifi","--no-collector.hwmon","--collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+)($|/)","--collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs)$"],"image":"prom/node-exporter:v1.3.1","name":"node-exporter","resources":{"limits":{"cpu":1,"memory":"500Mi"},"requests":{"cpu":"102m","memory":"180Mi"}},"volumeMounts":[{"mountPath":"/host/proc","name":"proc","readOnly":true},{"mountPath":"/host/sys","name":"sys","readOnly":true},{"mountPath":"/host/root","mountPropagation":"HostToContainer","name":"root","readOnly":true}]},{"args":["--logtostderr","--secure-listen-address=[$(IP)]:9100","--tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256","--upstream=http://127.0.0.1:9100/"],"env":[{"name":"IP","valueFrom":{"fieldRef":{"fieldPath":"status.podIP"}}}],"image":"kubesphere/kube-rbac-proxy:v0.11.0","name":"kube-rbac-proxy","ports":[{"containerPort":9100,"hostPort":9100,"name":"https"}],"resources":{"limits":{"cpu":1,"memory":"100Mi"},"requests":{"cpu":"10m","memory":"20Mi"}},"securityContext":{"runAsGroup":65532,"runAsNonRoot":true,"runAsUser":65532}}],"hostNetwork":true,"hostPID":true,"nodeSelector":{"kubernetes.io/os":"linux"},"securityContext":{"runAsNonRoot":true,"runAsUser":65534},"serviceAccountName":"node-exporter","tolerations":[{"operator":"Exists"}],"volumes":[{"hostPath":{"path":"/proc"},"name":"proc"},{"hostPath":{"path":"/sys"},"name":"sys"},{"hostPath":{"path":"/"},"name":"root"}]}}}}
    creationTimestamp: "2025-02-10T07:02:11Z"
    labels:
      app.kubernetes.io/component: exporter
      app.kubernetes.io/name: node-exporter
      app.kubernetes.io/part-of: kube-prometheus
      app.kubernetes.io/version: 1.3.1
      controller-revision-hash: 7f57ff6bf5
    name: node-exporter-7f57ff6bf5
    namespace: kubesphere-monitoring-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: node-exporter
      uid: 57c8536a-cdea-4fe5-840d-c6f0289d5d7b
    resourceVersion: "1022811"
    uid: 42b12520-64a0-4ff0-8521-51ca4d66d2a3
  revision: 1
- apiVersion: apps/v1
  data:
    spec:
      template:
        $patch: replace
        metadata:
          annotations:
            kubectl.kubernetes.io/default-container: prometheus
          creationTimestamp: null
          labels:
            app.kubernetes.io/component: prometheus
            app.kubernetes.io/instance: k8s
            app.kubernetes.io/managed-by: prometheus-operator
            app.kubernetes.io/name: prometheus
            app.kubernetes.io/part-of: kube-prometheus
            app.kubernetes.io/version: 2.39.1
            operator.prometheus.io/name: k8s
            operator.prometheus.io/shard: "0"
            prometheus: k8s
        spec:
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - preference:
                  matchExpressions:
                  - key: node-role.kubernetes.io/monitoring
                    operator: Exists
                weight: 100
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - podAffinityTerm:
                  labelSelector:
                    matchLabels:
                      app.kubernetes.io/component: prometheus
                      app.kubernetes.io/instance: k8s
                      app.kubernetes.io/name: prometheus
                      app.kubernetes.io/part-of: kube-prometheus
                  namespaces:
                  - kubesphere-monitoring-system
                  topologyKey: kubernetes.io/hostname
                weight: 100
          automountServiceAccountToken: true
          containers:
          - args:
            - --web.console.templates=/etc/prometheus/consoles
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --storage.tsdb.retention.time=7d
            - --config.file=/etc/prometheus/config_out/prometheus.env.yaml
            - --storage.tsdb.path=/prometheus
            - --web.enable-lifecycle
            - --query.max-concurrency=1000
            - --web.route-prefix=/
            - --web.config.file=/etc/prometheus/web_config/web-config.yaml
            image: prom/prometheus:v2.39.1
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 6
              httpGet:
                path: /-/healthy
                port: web
                scheme: HTTP
              periodSeconds: 5
              successThreshold: 1
              timeoutSeconds: 3
            name: prometheus
            ports:
            - containerPort: 9090
              name: web
              protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /-/ready
                port: web
                scheme: HTTP
              periodSeconds: 5
              successThreshold: 1
              timeoutSeconds: 3
            resources:
              limits:
                cpu: "4"
                memory: 16Gi
              requests:
                cpu: 200m
                memory: 400Mi
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: true
            startupProbe:
              failureThreshold: 60
              httpGet:
                path: /-/ready
                port: web
                scheme: HTTP
              periodSeconds: 15
              successThreshold: 1
              timeoutSeconds: 3
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: FallbackToLogsOnError
            volumeMounts:
            - mountPath: /etc/prometheus/config_out
              name: config-out
              readOnly: true
            - mountPath: /etc/prometheus/certs
              name: tls-assets
              readOnly: true
            - mountPath: /prometheus
              name: prometheus-k8s-db
              subPath: prometheus-db
            - mountPath: /etc/prometheus/rules/prometheus-k8s-rulefiles-0
              name: prometheus-k8s-rulefiles-0
            - mountPath: /etc/prometheus/web_config/web-config.yaml
              name: web-config
              readOnly: true
              subPath: web-config.yaml
          - args:
            - --listen-address=:8080
            - --reload-url=http://localhost:9090/-/reload
            - --config-file=/etc/prometheus/config/prometheus.yaml.gz
            - --config-envsubst-file=/etc/prometheus/config_out/prometheus.env.yaml
            - --watched-dir=/etc/prometheus/rules/prometheus-k8s-rulefiles-0
            command:
            - /bin/prometheus-config-reloader
            env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: SHARD
              value: "0"
            image: kubesphere/prometheus-config-reloader:v0.55.1
            imagePullPolicy: IfNotPresent
            name: config-reloader
            ports:
            - containerPort: 8080
              name: reloader-web
              protocol: TCP
            resources:
              limits:
                cpu: 100m
                memory: 50Mi
              requests:
                cpu: 100m
                memory: 50Mi
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: true
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: FallbackToLogsOnError
            volumeMounts:
            - mountPath: /etc/prometheus/config
              name: config
            - mountPath: /etc/prometheus/config_out
              name: config-out
            - mountPath: /etc/prometheus/rules/prometheus-k8s-rulefiles-0
              name: prometheus-k8s-rulefiles-0
          dnsPolicy: ClusterFirst
          initContainers:
          - args:
            - --watch-interval=0
            - --listen-address=:8080
            - --config-file=/etc/prometheus/config/prometheus.yaml.gz
            - --config-envsubst-file=/etc/prometheus/config_out/prometheus.env.yaml
            - --watched-dir=/etc/prometheus/rules/prometheus-k8s-rulefiles-0
            command:
            - /bin/prometheus-config-reloader
            env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: SHARD
              value: "0"
            image: kubesphere/prometheus-config-reloader:v0.55.1
            imagePullPolicy: IfNotPresent
            name: init-config-reloader
            ports:
            - containerPort: 8080
              name: reloader-web
              protocol: TCP
            resources:
              limits:
                cpu: 100m
                memory: 50Mi
              requests:
                cpu: 100m
                memory: 50Mi
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: true
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: FallbackToLogsOnError
            volumeMounts:
            - mountPath: /etc/prometheus/config
              name: config
            - mountPath: /etc/prometheus/config_out
              name: config-out
            - mountPath: /etc/prometheus/rules/prometheus-k8s-rulefiles-0
              name: prometheus-k8s-rulefiles-0
          nodeSelector:
            kubernetes.io/os: linux
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext:
            fsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
          serviceAccount: prometheus-k8s
          serviceAccountName: prometheus-k8s
          terminationGracePeriodSeconds: 600
          tolerations:
          - effect: NoSchedule
            key: dedicated
            operator: Equal
            value: monitoring
          volumes:
          - name: config
            secret:
              defaultMode: 420
              secretName: prometheus-k8s
          - name: tls-assets
            projected:
              defaultMode: 420
              sources:
              - secret:
                  name: prometheus-k8s-tls-assets-0
          - emptyDir: {}
            name: config-out
          - configMap:
              defaultMode: 420
              name: prometheus-k8s-rulefiles-0
            name: prometheus-k8s-rulefiles-0
          - name: web-config
            secret:
              defaultMode: 420
              secretName: prometheus-k8s-web-config
  kind: ControllerRevision
  metadata:
    annotations:
      prometheus-operator-input-hash: "6326989726274526352"
    creationTimestamp: "2025-02-10T07:02:15Z"
    labels:
      app.kubernetes.io/component: prometheus
      app.kubernetes.io/instance: k8s
      app.kubernetes.io/managed-by: prometheus-operator
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/part-of: kube-prometheus
      app.kubernetes.io/version: 2.39.1
      controller.kubernetes.io/hash: 745fccb79c
      operator.prometheus.io/name: k8s
      operator.prometheus.io/shard: "0"
      prometheus: k8s
    name: prometheus-k8s-745fccb79c
    namespace: kubesphere-monitoring-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: prometheus-k8s
      uid: 5d38d7dc-8f61-4eb2-81b7-07cb7d961443
    resourceVersion: "1022939"
    uid: 2319a5ff-1947-44d2-a7a4-6a63e5ec189c
  revision: 1
- apiVersion: apps/v1
  data:
    spec:
      template:
        $patch: replace
        metadata:
          annotations:
            kubectl.kubernetes.io/default-container: thanos-ruler
          creationTimestamp: null
          labels:
            app.kubernetes.io/component: thanos-ruler
            app.kubernetes.io/instance: kubesphere
            app.kubernetes.io/managed-by: prometheus-operator
            app.kubernetes.io/name: thanos-ruler
            app.kubernetes.io/part-of: kube-prometheus
            app.kubernetes.io/version: 0.31.0
            thanos-ruler: kubesphere
        spec:
          affinity:
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - podAffinityTerm:
                  labelSelector:
                    matchLabels:
                      app.kubernetes.io/component: thanos-ruler
                      app.kubernetes.io/instance: kubesphere
                      app.kubernetes.io/name: thanos-ruler
                      app.kubernetes.io/part-of: kube-prometheus
                  namespaces:
                  - kubesphere-monitoring-system
                  topologyKey: kubernetes.io/hostname
                weight: 100
          containers:
          - args:
            - rule
            - --data-dir=/thanos/data
            - --eval-interval=1m
            - --tsdb.retention=24h
            - --label=thanos_ruler_replica="$(POD_NAME)"
            - --alert.label-drop=thanos_ruler_replica
            - --query=http://prometheus-operated.kubesphere-monitoring-system.svc:9090
            - --rule-file=/etc/thanos/rules/*/*.yaml
            - --alertmanagers.url=dnssrv+http://alertmanager-operated.kubesphere-monitoring-system.svc:9093
            env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            image: thanosio/thanos:v0.31.0
            imagePullPolicy: IfNotPresent
            name: thanos-ruler
            ports:
            - containerPort: 10901
              name: grpc
              protocol: TCP
            - containerPort: 10902
              name: web
              protocol: TCP
            resources:
              limits:
                cpu: "1"
                memory: 1Gi
              requests:
                cpu: 100m
                memory: 100Mi
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: true
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: FallbackToLogsOnError
            volumeMounts:
            - mountPath: /thanos/data
              name: thanos-ruler-kubesphere-data
            - mountPath: /etc/thanos/rules/thanos-ruler-kubesphere-rulefiles-0
              name: thanos-ruler-kubesphere-rulefiles-0
          - args:
            - --listen-address=:8080
            - --reload-url=http://localhost:10902/-/reload
            - --watched-dir=/etc/thanos/rules/thanos-ruler-kubesphere-rulefiles-0
            command:
            - /bin/prometheus-config-reloader
            env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: SHARD
              value: "-1"
            image: kubesphere/prometheus-config-reloader:v0.55.1
            imagePullPolicy: IfNotPresent
            name: config-reloader
            ports:
            - containerPort: 8080
              name: reloader-web
              protocol: TCP
            resources:
              limits:
                cpu: 100m
                memory: 50Mi
              requests:
                cpu: 100m
                memory: 50Mi
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: true
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: FallbackToLogsOnError
            volumeMounts:
            - mountPath: /etc/thanos/rules/thanos-ruler-kubesphere-rulefiles-0
              name: thanos-ruler-kubesphere-rulefiles-0
          dnsPolicy: ClusterFirst
          nodeSelector:
            kubernetes.io/os: linux
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 120
          volumes:
          - configMap:
              defaultMode: 420
              name: thanos-ruler-kubesphere-rulefiles-0
            name: thanos-ruler-kubesphere-rulefiles-0
          - emptyDir: {}
            name: thanos-ruler-kubesphere-data
  kind: ControllerRevision
  metadata:
    annotations:
      prometheus-operator-input-hash: ""
    creationTimestamp: "2025-03-04T08:46:03Z"
    labels:
      app.kubernetes.io/component: thanos-ruler
      app.kubernetes.io/instance: kubesphere
      app.kubernetes.io/managed-by: prometheus-operator
      app.kubernetes.io/name: thanos-ruler
      app.kubernetes.io/part-of: kube-prometheus
      app.kubernetes.io/version: 0.31.0
      controller.kubernetes.io/hash: 7d97bc46ff
      thanos-ruler: kubesphere
    name: thanos-ruler-kubesphere-7d97bc46ff
    namespace: kubesphere-monitoring-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: thanos-ruler-kubesphere
      uid: 7515b72f-709c-4a9c-822d-fcdbc676e0dc
    resourceVersion: "11877379"
    uid: 2abefe7e-e518-40d1-8d33-26e3726526ab
  revision: 1
kind: List
metadata:
  resourceVersion: ""
